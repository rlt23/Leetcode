//253. Meeting Rooms II
//Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int result =0;
        if(intervals.length == 0 || intervals == null)return result;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0])); //sort by start times
        //if the input is [0,30],[15,20],[5,10] --> after soring, it becomes [0,30],[5,10],[15,20]
        pq.add(intervals[0][1]);
        //System.out.println(intervals[0][1]);
        for(int i =1;i<intervals.length;i++){
           // pq.add(intervals);
            if(pq.peek()<=intervals[i][0]){
                pq.poll();
                //pq.add(intervals[0][i]);
            }
                pq.add(intervals[i][1]);

        }
        return pq.size();
    }
}